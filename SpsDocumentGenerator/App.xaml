<Application
    x:Class="SpsDocumentGenerator.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:fr="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:system="clr-namespace:System;assembly=System.Runtime"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:viewModels="clr-namespace:SpsDocumentGenerator.ViewModels"
    StartupUri="/Views/MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Controls/BusyMask/BusyMask.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Controls/Indicator/Indicator.xaml" />
                <ui:ThemesDictionary Theme="Dark" />
                <ui:ControlsDictionary />
            </ResourceDictionary.MergedDictionaries>

            <viewModels:ViewModelLocator x:Key="Locator" />

            <!--  font  -->
            <FontFamily x:Key="KoPubDotumBold">pack://application:,,,/SpsDocumentGenerator;component/Assets/Fonts/#KoPubWorld돋움체_Pro Bold</FontFamily>
            <FontFamily x:Key="KoPubDotumLight">pack://application:,,,/SpsDocumentGenerator;component/Assets/Fonts/#KoPubWorld돋움체_Pro Light</FontFamily>
            <FontFamily x:Key="KoPubDotumMedium">pack://application:,,,/SpsDocumentGenerator;component/Assets/Fonts/#KoPubWorld돋움체_Pro Medium</FontFamily>

            <Style TargetType="{x:Type Control}">
                <!-- <Setter Property="TextElement.FontFamily" Value="{StaticResource KoPubDotumLight}" /> -->
                <Setter Property="TextElement.FontSize" Value="14" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style TargetType="{x:Type TextBlock}">
                <!-- <Setter Property="TextElement.FontFamily" Value="{StaticResource KoPubDotumLight}" /> -->
                <Setter Property="TextElement.FontSize" Value="14" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="TextElement.FontFamily" Value="{StaticResource KoPubDotumLight}" />
                <Setter Property="TextElement.FontSize" Value="14" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <Style TargetType="{x:Type Label}">
                <Setter Property="TextElement.FontFamily" Value="{StaticResource KoPubDotumLight}" />
                <Setter Property="TextElement.FontSize" Value="14" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
            </Style>

            <!--  style indicator  -->
            <SolidColorBrush x:Key="IndicatorForeground" fr:Freeze="True" Color="#80cbc4" />

            <SolidColorBrush x:Key="IndicatorBackground" fr:Freeze="True" Color="#DDDDDD" />

            <!-- <Style BasedOn="{StaticResource {x:Type ListView}}" TargetType="{x:Type ListView}" /> -->
            <!-- <Style BasedOn="{StaticResource {x:Type ListViewItem}}" TargetType="{x:Type ListViewItem}" /> -->

            <Style BasedOn="{StaticResource {x:Type ui:VirtualizingItemsControl}}" TargetType="{x:Type ui:VirtualizingItemsControl}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
                <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel HorizontalAlignment="Stretch" IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Vertical" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ui:VirtualizingItemsControl}">
                            <ScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Expander  -->
            <Thickness x:Key="ExpanderPadding">11,11,11,11</Thickness>
            <Thickness x:Key="ExpanderBorderThemeThickness">1</Thickness>
            <system:Double x:Key="ExpanderChevronSize">16.0</system:Double>

            <ControlTemplate x:Key="DefaultExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
                <Grid Margin="{TemplateBinding Padding}" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" />
                    <Grid x:Name="ChevronGrid" Grid.Column="1" Margin="0" VerticalAlignment="Center" Background="Transparent" RenderTransformOrigin="0.5, 0.5">
                        <Grid.RenderTransform>
                            <RotateTransform Angle="0" />
                        </Grid.RenderTransform>
                        <ui:SymbolIcon x:Name="ControlChevronIcon" FontSize="{StaticResource ExpanderChevronSize}" Foreground="{TemplateBinding Foreground}" Symbol="ChevronDown24" />
                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ChevronGrid" Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)" To="180" Duration="00:00:00.167" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ChevronGrid" Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)" To="0" Duration="00:00:00.167" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="DefaultExpanderStyle" TargetType="{x:Type Expander}">
                <!--  Universal WPF UI focus  -->
                <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
                <!--  Universal WPF UI focus  -->
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
                <Setter Property="BorderThickness" Value="{StaticResource ExpanderBorderThemeThickness}" />
                <Setter Property="Padding" Value="{StaticResource ExpanderPadding}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
                <Setter Property="FontWeight" Value="Normal" />
                <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
                <Setter Property="IsExpanded" Value="False" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!--  Top level controls always visible  -->
                                <Border x:Name="ToggleButtonBorder" Grid.Row="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="4, 4, 4,4">
                                    <ToggleButton
                                        x:Name="ExpanderToggleButton"
                                        Margin="0"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Center"
                                        Content="{TemplateBinding Header}"
                                        Foreground="{TemplateBinding Foreground}"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        IsEnabled="{TemplateBinding IsEnabled}"
                                        OverridesDefaultStyle="True"
                                        Template="{StaticResource DefaultExpanderToggleButtonStyle}" />
                                </Border>

                                <!--  Collapsed content to expand  -->
                                <Grid Grid.Row="1" ClipToBounds="True">
                                    <Border x:Name="ContentPresenterBorder" Background="{DynamicResource CardBackgroundFillColorDefaultBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1 0 1 1" CornerRadius="0,0,4,4" Visibility="Collapsed">
                                        <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" />
                                        <Border.Tag>
                                            <system:Double>0.0</system:Double>
                                        </Border.Tag>
                                    </Border>
                                </Grid>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="ToggleButtonBorder" Property="CornerRadius" Value="4,4,0,0" />
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="(Border.Visibility)">
                                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                                </ObjectAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="Tag">
                                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1.0" />
                                                    <SplineDoubleKeyFrame KeySpline="0.0, 0.0, 0.0, 1.0" KeyTime="0:0:0.333" Value="0.0" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="(Border.Visibility)">
                                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                                                </ObjectAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="Tag">
                                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0.0" />
                                                    <SplineDoubleKeyFrame KeySpline="1.0, 1.0, 0.0, 1.0" KeyTime="0:0:0.167" Value="1.0" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                                    <Setter TargetName="ExpanderToggleButton" Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                                </Trigger>
                                <Trigger SourceName="ExpanderToggleButton" Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ExpanderToggleButton" Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style BasedOn="{StaticResource DefaultExpanderStyle}" TargetType="{x:Type Expander}" />

            <Style BasedOn="{StaticResource {x:Type ui:MenuItem}}" TargetType="{x:Type ui:MenuItem}">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock Foreground="{DynamicResource TextFillColorLightPrimaryBrush}" Text="{Binding}" />
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock Foreground="Gray" Text="{Binding}" />
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type DataGridCell}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="MinHeight" Value="32" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Border x:Name="Border" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1 0.5" SnapsToDevicePixels="True">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Unfocused" />
                                        <VisualState x:Name="Focused" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CurrentStates">
                                        <VisualState x:Name="Regular" />
                                        <VisualState x:Name="Current">
                                            <!--
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="Red" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                            -->
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsReadOnly" Value="False">
                        <Setter Property="BorderBrush" Value="SkyBlue" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CenterTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Margin" Value="8 4" />
            </Style>

            <Style x:Key="LeftTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="Margin" Value="8 4" />
            </Style>

            <Style x:Key="RightTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Margin" Value="8 4" />
            </Style>

            <Style BasedOn="{StaticResource DefaultDataGridColumnHeaderStyle}" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>